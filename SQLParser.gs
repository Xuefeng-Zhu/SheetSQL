(function(root) {
  var SQLParser = function() {
    function require(path){ return require[path]; }
    require['./lexer'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.3.3
(function() {
  var Lexer;

  Lexer = (function() {
    var BOOLEAN, DBLSTRING, LITERAL, MATH, MATH_MULTI, NUMBER, SEPARATOR, SQL_CONDITIONALS, SQL_FUNCTIONS, SQL_IN, SQL_KEYWORDS, SQL_OPERATORS, SQL_SORT_ORDERS, STAR, STRING, WHITESPACE;

    function Lexer(sql, opts) {
      var bytesConsumed, i;
      if (opts == null) {
        opts = {};
      }
      this.sql = sql;
      this.preserveWhitespace = opts.preserveWhitespace || false;
      this.tokens = [];
      this.currentLine = 1;
      i = 0;
      while (this.chunk = sql.slice(i)) {
        bytesConsumed = this.keywordToken() || this.starToken() || this.booleanToken() || this.functionToken() || this.windowExtension() || this.sortOrderToken() || this.seperatorToken() || this.operatorToken() || this.mathToken() || this.dotToken() || this.conditionalToken() || this.inToken() || this.numberToken() || this.stringToken() || this.parensToken() || this.whitespaceToken() || this.literalToken();
        if (bytesConsumed < 1) {
          throw new Error("NOTHING CONSUMED: Stopped at - '" + (this.chunk.slice(0, 30)) + "'");
        }
        i += bytesConsumed;
      }
      this.token('EOF', '');
    }

    Lexer.prototype.token = function(name, value) {
      return this.tokens.push([name, value, this.currentLine]);
    };

    Lexer.prototype.tokenizeFromRegex = function(name, regex, part, lengthPart, output) {
      var match, partMatch;
      if (part == null) {
        part = 0;
      }
      if (lengthPart == null) {
        lengthPart = part;
      }
      if (output == null) {
        output = true;
      }
      if (!(match = regex.exec(this.chunk))) {
        return 0;
      }
      partMatch = match[part];
      if (output) {
        this.token(name, partMatch);
      }
      return match[lengthPart].length;
    };

    Lexer.prototype.tokenizeFromWord = function(name, word) {
      var match, matcher;
      if (word == null) {
        word = name;
      }
      word = this.regexEscape(word);
      matcher = /^\w+$/.test(word) ? new RegExp("^(" + word + ")\\b", 'ig') : new RegExp("^(" + word + ")", 'ig');
      match = matcher.exec(this.chunk);
      if (!match) {
        return 0;
      }
      this.token(name, match[1]);
      return match[1].length;
    };

    Lexer.prototype.tokenizeFromList = function(name, list) {
      var entry, ret, _i, _len;
      ret = 0;
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        entry = list[_i];
        ret = this.tokenizeFromWord(name, entry);
        if (ret > 0) {
          break;
        }
      }
      return ret;
    };

    Lexer.prototype.keywordToken = function() {
      return this.tokenizeFromWord('SELECT') || this.tokenizeFromWord('DISTINCT') || this.tokenizeFromWord('FROM') || this.tokenizeFromWord('WHERE') || this.tokenizeFromWord('GROUP') || this.tokenizeFromWord('ORDER') || this.tokenizeFromWord('BY') || this.tokenizeFromWord('HAVING') || this.tokenizeFromWord('LIMIT') || this.tokenizeFromWord('JOIN') || this.tokenizeFromWord('LEFT') || this.tokenizeFromWord('RIGHT') || this.tokenizeFromWord('INNER') || this.tokenizeFromWord('OUTER') || this.tokenizeFromWord('ON') || this.tokenizeFromWord('AS') || this.tokenizeFromWord('UNION') || this.tokenizeFromWord('ALL');
    };

    Lexer.prototype.dotToken = function() {
      return this.tokenizeFromWord('DOT', '.');
    };

    Lexer.prototype.operatorToken = function() {
      return this.tokenizeFromList('OPERATOR', SQL_OPERATORS);
    };

    Lexer.prototype.mathToken = function() {
      return this.tokenizeFromList('MATH', MATH) || this.tokenizeFromList('MATH_MULTI', MATH_MULTI);
    };

    Lexer.prototype.conditionalToken = function() {
      return this.tokenizeFromList('CONDITIONAL', SQL_CONDITIONALS);
    };

    Lexer.prototype.inToken = function() {
      return this.tokenizeFromList('IN', SQL_IN);
    };

    Lexer.prototype.functionToken = function() {
      return this.tokenizeFromList('FUNCTION', SQL_FUNCTIONS);
    };

    Lexer.prototype.sortOrderToken = function() {
      return this.tokenizeFromList('DIRECTION', SQL_SORT_ORDERS);
    };

    Lexer.prototype.booleanToken = function() {
      return this.tokenizeFromList('BOOLEAN', BOOLEAN);
    };

    Lexer.prototype.starToken = function() {
      return this.tokenizeFromRegex('STAR', STAR);
    };

    Lexer.prototype.seperatorToken = function() {
      return this.tokenizeFromRegex('SEPARATOR', SEPARATOR);
    };

    Lexer.prototype.literalToken = function() {
      return this.tokenizeFromRegex('LITERAL', LITERAL, 1, 0);
    };

    Lexer.prototype.numberToken = function() {
      return this.tokenizeFromRegex('NUMBER', NUMBER);
    };

    Lexer.prototype.stringToken = function() {
      return this.tokenizeFromRegex('STRING', STRING, 1, 0) || this.tokenizeFromRegex('DBLSTRING', DBLSTRING, 1, 0);
    };

    Lexer.prototype.parensToken = function() {
      return this.tokenizeFromRegex('LEFT_PAREN', /^\(/) || this.tokenizeFromRegex('RIGHT_PAREN', /^\)/);
    };

    Lexer.prototype.windowExtension = function() {
      var match;
      match = /^\.(win):(length|time)/i.exec(this.chunk);
      if (!match) {
        return 0;
      }
      this.token('WINDOW', match[1]);
      this.token('WINDOW_FUNCTION', match[2]);
      return match[0].length;
    };

    Lexer.prototype.whitespaceToken = function() {
      var match, newlines, partMatch;
      if (!(match = WHITESPACE.exec(this.chunk))) {
        return 0;
      }
      partMatch = match[0];
      newlines = partMatch.replace(/[^\n]/, '').length;
      this.currentLine += newlines;
      if (this.preserveWhitespace) {
        this.token(name, partMatch);
      }
      return partMatch.length;
    };

    Lexer.prototype.regexEscape = function(str) {
      return str.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    };

    SQL_KEYWORDS = ['SELECT', 'FROM', 'WHERE', 'GROUP BY', 'ORDER BY', 'HAVING', 'AS'];

    SQL_FUNCTIONS = ['AVG', 'COUNT', 'MIN', 'MAX', 'SUM'];

    SQL_SORT_ORDERS = ['ASC', 'DESC'];

    SQL_OPERATORS = ['=', '>', '<', 'LIKE', 'IS NOT', 'IS'];

    SQL_IN = ['IN'];

    SQL_CONDITIONALS = ['AND', 'OR'];

    BOOLEAN = ['TRUE', 'FALSE', 'NULL'];

    MATH = ['+', '-'];

    MATH_MULTI = ['/', '*'];

    STAR = /^\*/;

    SEPARATOR = /^,/;

    WHITESPACE = /^[ \n\r]+/;

    LITERAL = /^`?([a-z_][a-z0-9_]{0,})`?/i;

    NUMBER = /^[0-9]+(\.[0-9]+)?/;

    STRING = /^'([^\\']*(?:\\.[^\\']*)*)'/;

    DBLSTRING = /^"([^\\"]*(?:\\.[^\\"]*)*)"/;

    return Lexer;

  })();

  exports.tokenize = function(sql, opts) {
    return (new Lexer(sql, opts)).tokens;
  };

}).call(this);

};require['./compiled_parser'] = new function() {
  var exports = this;
  /* Jison generated parser */
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Query":4,"EOF":5,"SelectQuery":6,"Unions":7,"SelectWithLimitQuery":8,"BasicSelectQuery":9,"Select":10,"OrderClause":11,"GroupClause":12,"LimitClause":13,"SelectClause":14,"WhereClause":15,"SELECT":16,"Fields":17,"FROM":18,"Table":19,"DISTINCT":20,"Joins":21,"Literal":22,"LEFT_PAREN":23,"List":24,"RIGHT_PAREN":25,"WINDOW":26,"WINDOW_FUNCTION":27,"Number":28,"Union":29,"UNION":30,"ALL":31,"Join":32,"JOIN":33,"ON":34,"Expression":35,"LEFT":36,"RIGHT":37,"INNER":38,"OUTER":39,"WHERE":40,"LIMIT":41,"ORDER":42,"BY":43,"OrderArgs":44,"OrderArg":45,"SEPARATOR":46,"Value":47,"DIRECTION":48,"GroupBasicClause":49,"HavingClause":50,"GROUP":51,"ArgumentList":52,"HAVING":53,"MATH":54,"MATH_MULTI":55,"OPERATOR":56,"CONDITIONAL":57,"IN":58,"String":59,"Function":60,"UserFunction":61,"Boolean":62,"NUMBER":63,"BOOLEAN":64,"STRING":65,"DBLSTRING":66,"LITERAL":67,"DOT":68,"FUNCTION":69,"Field":70,"STAR":71,"AS":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"SELECT",18:"FROM",20:"DISTINCT",23:"LEFT_PAREN",25:"RIGHT_PAREN",26:"WINDOW",27:"WINDOW_FUNCTION",30:"UNION",31:"ALL",33:"JOIN",34:"ON",36:"LEFT",37:"RIGHT",38:"INNER",39:"OUTER",40:"WHERE",41:"LIMIT",42:"ORDER",43:"BY",46:"SEPARATOR",48:"DIRECTION",51:"GROUP",53:"HAVING",54:"MATH",55:"MATH_MULTI",56:"OPERATOR",57:"CONDITIONAL",58:"IN",63:"NUMBER",64:"BOOLEAN",65:"STRING",66:"DBLSTRING",67:"LITERAL",68:"DOT",69:"FUNCTION",71:"STAR",72:"AS"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[9,1],[9,2],[9,2],[9,3],[8,2],[10,1],[10,2],[14,4],[14,5],[14,5],[14,6],[19,1],[19,3],[19,3],[19,4],[19,6],[7,1],[7,2],[29,2],[29,3],[21,1],[21,2],[32,4],[32,5],[32,5],[32,6],[32,6],[32,6],[32,6],[15,2],[13,2],[11,3],[44,1],[44,3],[45,1],[45,2],[12,1],[12,2],[49,3],[50,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[24,1],[28,1],[62,1],[59,1],[59,1],[22,1],[22,3],[60,4],[61,4],[52,1],[52,3],[17,1],[17,3],[70,1],[70,1],[70,3]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1:return this.$ = $$[$0-1];
break;
case 2:this.$ = $$[$0];
break;
case 3:this.$ = (function () {
        $$[$0-1].unions = $$[$0];
        return $$[$0-1];
      }());
break;
case 4:this.$ = $$[$0];
break;
case 5:this.$ = $$[$0];
break;
case 6:this.$ = $$[$0];
break;
case 7:this.$ = (function () {
        $$[$0-1].order = $$[$0];
        return $$[$0-1];
      }());
break;
case 8:this.$ = (function () {
        $$[$0-1].group = $$[$0];
        return $$[$0-1];
      }());
break;
case 9:this.$ = (function () {
        $$[$0-2].group = $$[$0-1];
        $$[$0-2].order = $$[$0];
        return $$[$0-2];
      }());
break;
case 10:this.$ = (function () {
        $$[$0-1].limit = $$[$0];
        return $$[$0-1];
      }());
break;
case 11:this.$ = $$[$0];
break;
case 12:this.$ = (function () {
        $$[$0-1].where = $$[$0];
        return $$[$0-1];
      }());
break;
case 13:this.$ = new yy.Select($$[$0-2], $$[$0], false);
break;
case 14:this.$ = new yy.Select($$[$0-2], $$[$0], true);
break;
case 15:this.$ = new yy.Select($$[$0-3], $$[$0-1], false, $$[$0]);
break;
case 16:this.$ = new yy.Select($$[$0-3], $$[$0-1], true, $$[$0]);
break;
case 17:this.$ = new yy.Table($$[$0]);
break;
case 18:this.$ = $$[$0-1];
break;
case 19:this.$ = new yy.SubSelect($$[$0-1]);
break;
case 20:this.$ = new yy.SubSelect($$[$0-2], $$[$0]);
break;
case 21:this.$ = new yy.Table($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-1]);
break;
case 22:this.$ = [$$[$0]];
break;
case 23:this.$ = $$[$0-1].concat($$[$01]);
break;
case 24:this.$ = new yy.Union($$[$0]);
break;
case 25:this.$ = new yy.Union($$[$0], true);
break;
case 26:this.$ = [$$[$0]];
break;
case 27:this.$ = $$[$0-1].concat($$[$0]);
break;
case 28:this.$ = new yy.Join($$[$0-2], $$[$0]);
break;
case 29:this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT');
break;
case 30:this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT');
break;
case 31:this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT', 'INNER');
break;
case 32:this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT', 'INNER');
break;
case 33:this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT', 'OUTER');
break;
case 34:this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT', 'OUTER');
break;
case 35:this.$ = new yy.Where($$[$0]);
break;
case 36:this.$ = new yy.Limit($$[$0]);
break;
case 37:this.$ = new yy.Order($$[$0]);
break;
case 38:this.$ = [$$[$0]];
break;
case 39:this.$ = $$[$0-2].concat($$[$0]);
break;
case 40:this.$ = new yy.OrderArgument($$[$0], 'ASC');
break;
case 41:this.$ = new yy.OrderArgument($$[$0-1], $$[$0]);
break;
case 42:this.$ = $$[$0];
break;
case 43:this.$ = (function () {
        $$[$0-1].having = $$[$0];
        return $$[$0-1];
      }());
break;
case 44:this.$ = new yy.Group($$[$0]);
break;
case 45:this.$ = new yy.Having($$[$0]);
break;
case 46:this.$ = $$[$0-1];
break;
case 47:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 48:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 49:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 50:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 51:this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 52:this.$ = $$[$0];
break;
case 53:this.$ = $$[$0];
break;
case 54:this.$ = $$[$0];
break;
case 55:this.$ = $$[$0];
break;
case 56:this.$ = $$[$0];
break;
case 57:this.$ = $$[$0];
break;
case 58:this.$ = $$[$0];
break;
case 59:this.$ = new yy.ListValue($$[$0]);
break;
case 60:this.$ = new yy.NumberValue($$[$0]);
break;
case 61:this.$ = new yy.BooleanValue($$[$0]);
break;
case 62:this.$ = new yy.StringValue($$[$0], "'");
break;
case 63:this.$ = new yy.StringValue($$[$0], '"');
break;
case 64:this.$ = new yy.LiteralValue($$[$0]);
break;
case 65:this.$ = new yy.LiteralValue($$[$0-2], $$[$0]);
break;
case 66:this.$ = new yy.FunctionValue($$[$0-3], $$[$0-1]);
break;
case 67:this.$ = new yy.FunctionValue($$[$0-3], $$[$0-1], true);
break;
case 68:this.$ = [$$[$0]];
break;
case 69:this.$ = $$[$0-2].concat($$[$0]);
break;
case 70:this.$ = [$$[$0]];
break;
case 71:this.$ = $$[$0-2].concat($$[$0]);
break;
case 72:this.$ = new yy.Star();
break;
case 73:this.$ = new yy.Field($$[$0]);
break;
case 74:this.$ = new yy.Field($$[$0-2], $$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:5,10:6,14:7,16:[1,8]},{1:[3]},{5:[1,9]},{5:[2,2],7:10,13:11,25:[2,2],29:12,30:[1,14],41:[1,13]},{5:[2,4],25:[2,4],30:[2,4],41:[2,4]},{5:[2,5],25:[2,5],30:[2,5],41:[2,5]},{5:[2,6],11:15,12:16,25:[2,6],30:[2,6],41:[2,6],42:[1,17],49:18,51:[1,19]},{5:[2,11],15:20,25:[2,11],30:[2,11],40:[1,21],41:[2,11],42:[2,11],51:[2,11]},{17:22,20:[1,23],22:29,23:[1,27],28:30,35:26,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39],70:24,71:[1,25]},{1:[2,1]},{5:[2,3],25:[2,3],29:41,30:[1,14]},{5:[2,10],25:[2,10],30:[2,10],41:[2,10]},{5:[2,22],25:[2,22],30:[2,22]},{28:42,63:[1,36]},{6:43,8:4,9:5,10:6,14:7,16:[1,8],31:[1,44]},{5:[2,7],25:[2,7],30:[2,7],41:[2,7]},{5:[2,8],11:45,25:[2,8],30:[2,8],41:[2,8],42:[1,17]},{43:[1,46]},{5:[2,42],25:[2,42],30:[2,42],41:[2,42],42:[2,42],50:47,53:[1,48]},{43:[1,49]},{5:[2,12],25:[2,12],30:[2,12],41:[2,12],42:[2,12],51:[2,12]},{22:29,23:[1,27],28:30,35:50,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{18:[1,51],46:[1,52]},{17:53,22:29,23:[1,27],28:30,35:26,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39],70:24,71:[1,25]},{18:[2,70],46:[2,70]},{18:[2,72],46:[2,72]},{18:[2,73],46:[2,73],54:[1,55],55:[1,56],56:[1,57],57:[1,58],72:[1,54]},{22:29,23:[1,27],28:30,35:59,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{5:[2,52],18:[2,52],25:[2,52],30:[2,52],33:[2,52],36:[2,52],37:[2,52],40:[2,52],41:[2,52],42:[2,52],46:[2,52],51:[2,52],53:[2,52],54:[2,52],55:[2,52],56:[2,52],57:[2,52],58:[1,60],72:[2,52]},{5:[2,53],18:[2,53],25:[2,53],30:[2,53],33:[2,53],36:[2,53],37:[2,53],40:[2,53],41:[2,53],42:[2,53],46:[2,53],48:[2,53],51:[2,53],53:[2,53],54:[2,53],55:[2,53],56:[2,53],57:[2,53],58:[2,53],68:[1,61],72:[2,53]},{5:[2,54],18:[2,54],25:[2,54],30:[2,54],33:[2,54],36:[2,54],37:[2,54],40:[2,54],41:[2,54],42:[2,54],46:[2,54],48:[2,54],51:[2,54],53:[2,54],54:[2,54],55:[2,54],56:[2,54],57:[2,54],58:[2,54],72:[2,54]},{5:[2,55],18:[2,55],25:[2,55],30:[2,55],33:[2,55],36:[2,55],37:[2,55],40:[2,55],41:[2,55],42:[2,55],46:[2,55],48:[2,55],51:[2,55],53:[2,55],54:[2,55],55:[2,55],56:[2,55],57:[2,55],58:[2,55],72:[2,55]},{5:[2,56],18:[2,56],25:[2,56],30:[2,56],33:[2,56],36:[2,56],37:[2,56],40:[2,56],41:[2,56],42:[2,56],46:[2,56],48:[2,56],51:[2,56],53:[2,56],54:[2,56],55:[2,56],56:[2,56],57:[2,56],58:[2,56],72:[2,56]},{5:[2,57],18:[2,57],25:[2,57],30:[2,57],33:[2,57],36:[2,57],37:[2,57],40:[2,57],41:[2,57],42:[2,57],46:[2,57],48:[2,57],51:[2,57],53:[2,57],54:[2,57],55:[2,57],56:[2,57],57:[2,57],58:[2,57],72:[2,57]},{5:[2,58],18:[2,58],25:[2,58],30:[2,58],33:[2,58],36:[2,58],37:[2,58],40:[2,58],41:[2,58],42:[2,58],46:[2,58],48:[2,58],51:[2,58],53:[2,58],54:[2,58],55:[2,58],56:[2,58],57:[2,58],58:[2,58],72:[2,58]},{5:[2,64],18:[2,64],23:[1,62],25:[2,64],30:[2,64],33:[2,64],36:[2,64],37:[2,64],40:[2,64],41:[2,64],42:[2,64],46:[2,64],48:[2,64],51:[2,64],53:[2,64],54:[2,64],55:[2,64],56:[2,64],57:[2,64],58:[2,64],68:[2,64],72:[2,64]},{5:[2,60],18:[2,60],25:[2,60],30:[2,60],33:[2,60],36:[2,60],37:[2,60],40:[2,60],41:[2,60],42:[2,60],46:[2,60],48:[2,60],51:[2,60],53:[2,60],54:[2,60],55:[2,60],56:[2,60],57:[2,60],58:[2,60],72:[2,60]},{5:[2,62],18:[2,62],25:[2,62],30:[2,62],33:[2,62],36:[2,62],37:[2,62],40:[2,62],41:[2,62],42:[2,62],46:[2,62],48:[2,62],51:[2,62],53:[2,62],54:[2,62],55:[2,62],56:[2,62],57:[2,62],58:[2,62],72:[2,62]},{5:[2,63],18:[2,63],25:[2,63],30:[2,63],33:[2,63],36:[2,63],37:[2,63],40:[2,63],41:[2,63],42:[2,63],46:[2,63],48:[2,63],51:[2,63],53:[2,63],54:[2,63],55:[2,63],56:[2,63],57:[2,63],58:[2,63],72:[2,63]},{23:[1,63]},{5:[2,61],18:[2,61],25:[2,61],30:[2,61],33:[2,61],36:[2,61],37:[2,61],40:[2,61],41:[2,61],42:[2,61],46:[2,61],48:[2,61],51:[2,61],53:[2,61],54:[2,61],55:[2,61],56:[2,61],57:[2,61],58:[2,61],72:[2,61]},{5:[2,23],25:[2,23],30:[2,23]},{5:[2,36],25:[2,36],30:[2,36],41:[2,36]},{5:[2,24],13:11,25:[2,24],30:[2,24],41:[1,13]},{6:64,8:4,9:5,10:6,14:7,16:[1,8]},{5:[2,9],25:[2,9],30:[2,9],41:[2,9]},{22:29,28:30,44:65,45:66,47:67,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{5:[2,43],25:[2,43],30:[2,43],41:[2,43],42:[2,43]},{22:29,23:[1,27],28:30,35:68,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{22:29,23:[1,27],28:30,35:70,47:28,52:69,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{5:[2,35],25:[2,35],30:[2,35],41:[2,35],42:[2,35],51:[2,35],54:[1,55],55:[1,56],56:[1,57],57:[1,58]},{19:71,22:72,23:[1,73],67:[1,74]},{22:29,23:[1,27],28:30,35:26,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39],70:75,71:[1,25]},{18:[1,76],46:[1,52]},{22:77,67:[1,74]},{22:29,23:[1,27],28:30,35:78,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{22:29,23:[1,27],28:30,35:79,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{22:29,23:[1,27],28:30,35:80,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{22:29,23:[1,27],28:30,35:81,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{25:[1,82],54:[1,55],55:[1,56],56:[1,57],57:[1,58]},{19:83,22:72,23:[1,73],67:[1,74]},{67:[1,84]},{22:29,23:[1,27],28:30,35:70,47:28,52:85,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{22:29,23:[1,27],28:30,35:70,47:28,52:86,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{5:[2,25],13:11,25:[2,25],30:[2,25],41:[1,13]},{5:[2,37],25:[2,37],30:[2,37],41:[2,37],46:[1,87]},{5:[2,38],25:[2,38],30:[2,38],41:[2,38],46:[2,38]},{5:[2,40],25:[2,40],30:[2,40],41:[2,40],46:[2,40],48:[1,88]},{5:[2,45],25:[2,45],30:[2,45],41:[2,45],42:[2,45],54:[1,55],55:[1,56],56:[1,57],57:[1,58]},{5:[2,44],25:[2,44],30:[2,44],41:[2,44],42:[2,44],46:[1,89],53:[2,44]},{5:[2,68],25:[2,68],30:[2,68],41:[2,68],42:[2,68],46:[2,68],53:[2,68],54:[1,55],55:[1,56],56:[1,57],57:[1,58]},{5:[2,13],21:90,25:[2,13],30:[2,13],32:91,33:[1,92],36:[1,93],37:[1,94],40:[2,13],41:[2,13],42:[2,13],51:[2,13]},{5:[2,17],18:[2,17],25:[2,17],26:[1,95],30:[2,17],33:[2,17],34:[2,17],36:[2,17],37:[2,17],40:[2,17],41:[2,17],42:[2,17],46:[2,17],51:[2,17],53:[2,17],54:[2,17],55:[2,17],56:[2,17],57:[2,17],68:[1,61],72:[2,17]},{4:97,6:3,8:4,9:5,10:6,14:7,16:[1,8],22:29,23:[1,27],24:96,28:30,35:70,47:28,52:98,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{5:[2,64],18:[2,64],25:[2,64],26:[2,64],30:[2,64],33:[2,64],34:[2,64],36:[2,64],37:[2,64],40:[2,64],41:[2,64],42:[2,64],46:[2,64],51:[2,64],53:[2,64],54:[2,64],55:[2,64],56:[2,64],57:[2,64],68:[2,64],72:[2,64]},{18:[2,71],46:[2,71]},{19:99,22:72,23:[1,73],67:[1,74]},{18:[2,74],46:[2,74],68:[1,61]},{5:[2,47],18:[2,47],25:[2,47],30:[2,47],33:[2,47],36:[2,47],37:[2,47],40:[2,47],41:[2,47],42:[2,47],46:[2,47],51:[2,47],53:[2,47],54:[2,47],55:[1,56],56:[2,47],57:[2,47],72:[2,47]},{5:[2,48],18:[2,48],25:[2,48],30:[2,48],33:[2,48],36:[2,48],37:[2,48],40:[2,48],41:[2,48],42:[2,48],46:[2,48],51:[2,48],53:[2,48],54:[2,48],55:[2,48],56:[2,48],57:[2,48],72:[2,48]},{5:[2,49],18:[2,49],25:[2,49],30:[2,49],33:[2,49],36:[2,49],37:[2,49],40:[2,49],41:[2,49],42:[2,49],46:[2,49],51:[2,49],53:[2,49],54:[1,55],55:[1,56],56:[2,49],57:[2,49],72:[2,49]},{5:[2,50],18:[2,50],25:[2,50],30:[2,50],33:[2,50],36:[2,50],37:[2,50],40:[2,50],41:[2,50],42:[2,50],46:[2,50],51:[2,50],53:[2,50],54:[1,55],55:[1,56],56:[1,57],57:[2,50],72:[2,50]},{5:[2,46],18:[2,46],25:[2,46],30:[2,46],33:[2,46],36:[2,46],37:[2,46],40:[2,46],41:[2,46],42:[2,46],46:[2,46],51:[2,46],53:[2,46],54:[2,46],55:[2,46],56:[2,46],57:[2,46],72:[2,46]},{5:[2,51],18:[2,51],25:[2,51],30:[2,51],33:[2,51],36:[2,51],37:[2,51],40:[2,51],41:[2,51],42:[2,51],46:[2,51],51:[2,51],53:[2,51],54:[2,51],55:[2,51],56:[2,51],57:[2,51],72:[2,51]},{5:[2,65],18:[2,65],25:[2,65],26:[2,65],30:[2,65],33:[2,65],34:[2,65],36:[2,65],37:[2,65],40:[2,65],41:[2,65],42:[2,65],46:[2,65],48:[2,65],51:[2,65],53:[2,65],54:[2,65],55:[2,65],56:[2,65],57:[2,65],58:[2,65],68:[2,65],72:[2,65]},{25:[1,100],46:[1,89]},{25:[1,101],46:[1,89]},{22:29,28:30,45:102,47:67,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{5:[2,41],25:[2,41],30:[2,41],41:[2,41],46:[2,41]},{22:29,28:30,47:103,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{5:[2,15],25:[2,15],30:[2,15],32:104,33:[1,92],36:[1,93],37:[1,94],40:[2,15],41:[2,15],42:[2,15],51:[2,15]},{5:[2,26],25:[2,26],30:[2,26],33:[2,26],36:[2,26],37:[2,26],40:[2,26],41:[2,26],42:[2,26],51:[2,26]},{19:105,22:72,23:[1,73],67:[1,74]},{33:[1,106],38:[1,107],39:[1,108]},{33:[1,109],38:[1,110],39:[1,111]},{27:[1,112]},{25:[1,113]},{25:[1,114]},{25:[2,59],46:[1,89]},{5:[2,14],21:115,25:[2,14],30:[2,14],32:91,33:[1,92],36:[1,93],37:[1,94],40:[2,14],41:[2,14],42:[2,14],51:[2,14]},{5:[2,67],18:[2,67],25:[2,67],30:[2,67],33:[2,67],36:[2,67],37:[2,67],40:[2,67],41:[2,67],42:[2,67],46:[2,67],48:[2,67],51:[2,67],53:[2,67],54:[2,67],55:[2,67],56:[2,67],57:[2,67],58:[2,67],72:[2,67]},{5:[2,66],18:[2,66],25:[2,66],30:[2,66],33:[2,66],36:[2,66],37:[2,66],40:[2,66],41:[2,66],42:[2,66],46:[2,66],48:[2,66],51:[2,66],53:[2,66],54:[2,66],55:[2,66],56:[2,66],57:[2,66],58:[2,66],72:[2,66]},{5:[2,39],25:[2,39],30:[2,39],41:[2,39],46:[2,39]},{5:[2,69],25:[2,69],30:[2,69],41:[2,69],42:[2,69],46:[2,69],53:[2,69]},{5:[2,27],25:[2,27],30:[2,27],33:[2,27],36:[2,27],37:[2,27],40:[2,27],41:[2,27],42:[2,27],51:[2,27]},{34:[1,116]},{19:117,22:72,23:[1,73],67:[1,74]},{33:[1,118]},{33:[1,119]},{19:120,22:72,23:[1,73],67:[1,74]},{33:[1,121]},{33:[1,122]},{23:[1,123]},{5:[2,18],18:[2,18],25:[2,18],30:[2,18],33:[2,18],34:[2,18],36:[2,18],37:[2,18],40:[2,18],41:[2,18],42:[2,18],46:[2,18],51:[2,18],53:[2,18],54:[2,18],55:[2,18],56:[2,18],57:[2,18],72:[2,18]},{5:[2,19],18:[2,19],22:124,25:[2,19],30:[2,19],33:[2,19],34:[2,19],36:[2,19],37:[2,19],40:[2,19],41:[2,19],42:[2,19],46:[2,19],51:[2,19],53:[2,19],54:[2,19],55:[2,19],56:[2,19],57:[2,19],67:[1,74],72:[2,19]},{5:[2,16],25:[2,16],30:[2,16],32:104,33:[1,92],36:[1,93],37:[1,94],40:[2,16],41:[2,16],42:[2,16],51:[2,16]},{22:29,23:[1,27],28:30,35:125,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{34:[1,126]},{19:127,22:72,23:[1,73],67:[1,74]},{19:128,22:72,23:[1,73],67:[1,74]},{34:[1,129]},{19:130,22:72,23:[1,73],67:[1,74]},{19:131,22:72,23:[1,73],67:[1,74]},{28:132,63:[1,36]},{5:[2,20],18:[2,20],25:[2,20],30:[2,20],33:[2,20],34:[2,20],36:[2,20],37:[2,20],40:[2,20],41:[2,20],42:[2,20],46:[2,20],51:[2,20],53:[2,20],54:[2,20],55:[2,20],56:[2,20],57:[2,20],68:[1,61],72:[2,20]},{5:[2,28],25:[2,28],30:[2,28],33:[2,28],36:[2,28],37:[2,28],40:[2,28],41:[2,28],42:[2,28],51:[2,28],54:[1,55],55:[1,56],56:[1,57],57:[1,58]},{22:29,23:[1,27],28:30,35:133,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{34:[1,134]},{34:[1,135]},{22:29,23:[1,27],28:30,35:136,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{34:[1,137]},{34:[1,138]},{25:[1,139]},{5:[2,29],25:[2,29],30:[2,29],33:[2,29],36:[2,29],37:[2,29],40:[2,29],41:[2,29],42:[2,29],51:[2,29],54:[1,55],55:[1,56],56:[1,57],57:[1,58]},{22:29,23:[1,27],28:30,35:140,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{22:29,23:[1,27],28:30,35:141,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{5:[2,30],25:[2,30],30:[2,30],33:[2,30],36:[2,30],37:[2,30],40:[2,30],41:[2,30],42:[2,30],51:[2,30],54:[1,55],55:[1,56],56:[1,57],57:[1,58]},{22:29,23:[1,27],28:30,35:142,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{22:29,23:[1,27],28:30,35:143,47:28,59:31,60:32,61:33,62:34,63:[1,36],64:[1,40],65:[1,37],66:[1,38],67:[1,35],69:[1,39]},{5:[2,21],18:[2,21],25:[2,21],30:[2,21],33:[2,21],34:[2,21],36:[2,21],37:[2,21],40:[2,21],41:[2,21],42:[2,21],46:[2,21],51:[2,21],53:[2,21],54:[2,21],55:[2,21],56:[2,21],57:[2,21],72:[2,21]},{5:[2,31],25:[2,31],30:[2,31],33:[2,31],36:[2,31],37:[2,31],40:[2,31],41:[2,31],42:[2,31],51:[2,31],54:[1,55],55:[1,56],56:[1,57],57:[1,58]},{5:[2,33],25:[2,33],30:[2,33],33:[2,33],36:[2,33],37:[2,33],40:[2,33],41:[2,33],42:[2,33],51:[2,33],54:[1,55],55:[1,56],56:[1,57],57:[1,58]},{5:[2,32],25:[2,32],30:[2,32],33:[2,32],36:[2,32],37:[2,32],40:[2,32],41:[2,32],42:[2,32],51:[2,32],54:[1,55],55:[1,56],56:[1,57],57:[1,58]},{5:[2,34],25:[2,34],30:[2,34],33:[2,34],36:[2,34],37:[2,34],40:[2,34],41:[2,34],42:[2,34],51:[2,34],54:[1,55],55:[1,56],56:[1,57],57:[1,58]}],
defaultActions: {9:[2,1]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
undefined
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); }
exports.main = function commonjsMain(args) {
    if (!args[1])
        throw new Error('Usage: '+args[0]+' FILE');
    var source, cwd;
    if (typeof process !== 'undefined') {
        source = require('fs').readFileSync(require('path').resolve(args[1]), "utf8");
    } else {
        source = require("file").path(require("file").cwd()).join(args[1]).read({charset: "utf-8"});
    }
    return exports.parser.parse(source);
}
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require("system").args);
}
}
};require['./nodes'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.3.3
(function() {
  var Field, FunctionValue, Group, Having, Join, Limit, ListValue, LiteralValue, Op, Order, OrderArgument, Select, Star, StringValue, SubSelect, Table, Union, Where, indent;

  indent = function(str) {
    var line;
    return ((function() {
      var _i, _len, _ref, _results;
      _ref = str.split("\n");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        _results.push("  " + line);
      }
      return _results;
    })()).join("\n");
  };

  exports.Select = Select = (function() {

    function Select(fields, source, distinct, joins, unions) {
      this.fields = fields;
      this.source = source;
      this.distinct = distinct != null ? distinct : false;
      this.joins = joins != null ? joins : [];
      this.unions = unions != null ? unions : [];
      this.order = null;
      this.group = null;
      this.where = null;
      this.limit = null;
    }

    Select.prototype.toString = function() {
      var join, ret, union, _i, _j, _len, _len1, _ref, _ref1;
      ret = ["SELECT " + (this.fields.join(', '))];
      ret.push(indent("FROM " + this.source));
      _ref = this.joins;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        join = _ref[_i];
        ret.push(indent(join.toString()));
      }
      if (this.where) {
        ret.push(indent(this.where.toString()));
      }
      if (this.group) {
        ret.push(indent(this.group.toString()));
      }
      if (this.order) {
        ret.push(indent(this.order.toString()));
      }
      if (this.limit) {
        ret.push(indent(this.limit.toString()));
      }
      _ref1 = this.unions;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        union = _ref1[_j];
        ret.push(union.toString());
      }
      return ret.join("\n");
    };

    return Select;

  })();

  exports.SubSelect = SubSelect = (function() {

    function SubSelect(select, name) {
      this.select = select;
      this.name = name != null ? name : null;
      null;
    }

    SubSelect.prototype.toString = function() {
      var ret;
      ret = [];
      ret.push('(');
      ret.push(indent(this.select.toString()));
      ret.push(this.name ? ") " + (this.name.toString()) : ")");
      return ret.join("\n");
    };

    return SubSelect;

  })();

  exports.Join = Join = (function() {

    function Join(right, conditions, side, mode) {
      this.right = right;
      this.conditions = conditions != null ? conditions : null;
      this.side = side != null ? side : null;
      this.mode = mode != null ? mode : null;
      null;
    }

    Join.prototype.toString = function() {
      var ret;
      ret = '';
      if (this.side != null) {
        ret += "" + this.side + " ";
      }
      if (this.mode != null) {
        ret += "" + this.mode + " ";
      }
      return ret + ("JOIN " + this.right + "\n") + indent("ON " + this.conditions);
    };

    return Join;

  })();

  exports.Union = Union = (function() {

    function Union(query, all) {
      this.query = query;
      this.all = all != null ? all : false;
      null;
    }

    Union.prototype.toString = function() {
      var all;
      all = this.all ? ' ALL' : '';
      return "UNION" + all + "\n" + (this.query.toString());
    };

    return Union;

  })();

  exports.LiteralValue = LiteralValue = (function() {

    function LiteralValue(value, value2) {
      this.value = value;
      this.value2 = value2 != null ? value2 : null;
      if (this.value2) {
        this.nested = true;
        this.values = this.value.values;
        this.values.push(value2);
      } else {
        this.nested = false;
        this.values = [this.value];
      }
    }

    LiteralValue.prototype.toString = function() {
      return "`" + (this.values.join('.')) + "`";
    };

    return LiteralValue;

  })();

  exports.StringValue = StringValue = (function() {

    function StringValue(value, quoteType) {
      this.value = value;
      this.quoteType = quoteType != null ? quoteType : "''";
      null;
    }

    StringValue.prototype.toString = function() {
      return "" + this.quoteType + this.value + this.quoteType;
    };

    return StringValue;

  })();

  exports.NumberValue = LiteralValue = (function() {

    function LiteralValue(value) {
      this.value = Number(value);
    }

    LiteralValue.prototype.toString = function() {
      return this.value.toString();
    };

    return LiteralValue;

  })();

  exports.ListValue = ListValue = (function() {

    function ListValue(value) {
      this.value = value;
    }

    ListValue.prototype.toString = function() {
      return "(" + (this.value.join(', ')) + ")";
    };

    return ListValue;

  })();

  exports.BooleanValue = LiteralValue = (function() {

    function LiteralValue(value) {
      this.value = (function() {
        switch (value.toLowerCase()) {
          case 'true':
            return true;
          case 'false':
            return false;
          default:
            return null;
        }
      })();
    }

    LiteralValue.prototype.toString = function() {
      if (this.value != null) {
        return this.value.toString().toUpperCase();
      } else {
        return 'NULL';
      }
    };

    return LiteralValue;

  })();

  exports.FunctionValue = FunctionValue = (function() {

    function FunctionValue(name, _arguments, udf) {
      this.name = name;
      this["arguments"] = _arguments != null ? _arguments : [];
      this.udf = udf != null ? udf : false;
      null;
    }

    FunctionValue.prototype.toString = function() {
      return "" + this.name + "(" + (this["arguments"].join(', ')) + ")";
    };

    return FunctionValue;

  })();

  exports.Order = Order = (function() {

    function Order(orderings) {
      this.orderings = orderings;
    }

    Order.prototype.toString = function() {
      return "ORDER BY " + (this.orderings.join(', '));
    };

    return Order;

  })();

  exports.OrderArgument = OrderArgument = (function() {

    function OrderArgument(value, direction) {
      this.value = value;
      this.direction = direction != null ? direction : 'ASC';
      null;
    }

    OrderArgument.prototype.toString = function() {
      return "" + this.value + " " + this.direction;
    };

    return OrderArgument;

  })();

  exports.Limit = Limit = (function() {

    function Limit(value) {
      this.value = value;
      null;
    }

    Limit.prototype.toString = function() {
      return "LIMIT " + this.value;
    };

    return Limit;

  })();

  exports.Table = Table = (function() {

    function Table(name, win, winFn, winArg) {
      this.name = name;
      this.win = win != null ? win : null;
      this.winFn = winFn != null ? winFn : null;
      this.winArg = winArg != null ? winArg : null;
      null;
    }

    Table.prototype.toString = function() {
      if (this.win) {
        return "" + this.name + "." + this.win + ":" + this.winFn + "(" + this.winArg + ")";
      } else {
        return this.name.toString();
      }
    };

    return Table;

  })();

  exports.Group = Group = (function() {

    function Group(fields) {
      this.fields = fields;
      this.having = null;
    }

    Group.prototype.toString = function() {
      var ret;
      ret = ["GROUP BY " + (this.fields.join(', '))];
      if (this.having) {
        ret.push(this.having.toString());
      }
      return ret.join("\n");
    };

    return Group;

  })();

  exports.Where = Where = (function() {

    function Where(conditions) {
      this.conditions = conditions;
      null;
    }

    Where.prototype.toString = function() {
      return "WHERE " + this.conditions;
    };

    return Where;

  })();

  exports.Having = Having = (function() {

    function Having(conditions) {
      this.conditions = conditions;
      null;
    }

    Having.prototype.toString = function() {
      return "HAVING " + this.conditions;
    };

    return Having;

  })();

  exports.Op = Op = (function() {

    function Op(operation, left, right) {
      this.operation = operation;
      this.left = left;
      this.right = right;
      null;
    }

    Op.prototype.toString = function() {
      return "(" + this.left + " " + (this.operation.toUpperCase()) + " " + this.right + ")";
    };

    return Op;

  })();

  exports.Field = Field = (function() {

    function Field(field, name) {
      this.field = field;
      this.name = name != null ? name : null;
      null;
    }

    Field.prototype.toString = function() {
      if (this.name) {
        return "" + this.field + " AS " + this.name;
      } else {
        return this.field.toString();
      }
    };

    return Field;

  })();

  exports.Star = Star = (function() {

    function Star() {
      null;
    }

    Star.prototype.toString = function() {
      return '*';
    };

    Star.prototype.star = true;

    return Star;

  })();

}).call(this);

};require['./parser'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.3.3
(function() {
  var buildParser;

  buildParser = function() {
    var parser;
    parser = require('./compiled_parser').parser;
    parser.lexer = {
      lex: function() {
        var tag, _ref;
        _ref = this.tokens[this.pos++] || [''], tag = _ref[0], this.yytext = _ref[1], this.yylineno = _ref[2];
        return tag;
      },
      setInput: function(tokens) {
        this.tokens = tokens;
        return this.pos = 0;
      },
      upcomingInput: function() {
        return "";
      }
    };
    parser.yy = require('./nodes');
    return parser;
  };

  exports.parser = buildParser();

  exports.parse = function(str) {
    return buildParser().parse(str);
  };

}).call(this);

};require['./sql_parser'] = new function() {
  var exports = this;
  // Generated by CoffeeScript 1.3.3
(function() {

  exports.lexer = require('./lexer');

  exports.parser = require('./parser');

  exports.nodes = require('./nodes');

  exports.parse = function(sql) {
    return exports.parser.parse(exports.lexer.tokenize(sql));
  };

}).call(this);

};
    return require['./sql_parser']
  }();

  if(typeof define === 'function' && define.amd) {
    define(function() { return SQLParser });
  } else { root.SQLParser = SQLParser }
}(this));